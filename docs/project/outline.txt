MusicMidi Project Outline
========================

Project Structure
----------------
MusicMidi/
├── src/
│   ├── core/                 # Core functionality
│   │   ├── midi_generator.py # MIDI file generation
│   │   ├── song_parser.py    # Song file parsing
│   │   ├── pattern_manager.py # Pattern management
│   │   └── variation_manager.py # Pattern variation management
│   ├── instruments/          # Instrument definitions
│   │   ├── base.py          # Base instrument class
│   │   ├── piano.py         # Piano implementation
│   │   ├── guitar.py        # Guitar implementation
│   │   ├── bass.py          # Bass implementation
│   │   └── drums.py         # Drums implementation
│   └── utils/               # Utility functions
├── tests/                   # Test files
├── docs/                    # Documentation
│   └── project/            # Project documentation
├── scripts/                # Utility scripts
├── input/                  # Input files
│   ├── songs/             # Song text files
│   └── templates/         # Template files
├── output/                 # Generated MIDI files
│   └── Output-Text/       # Log files and text output
└── requirements.txt        # Project dependencies

Core Components
--------------
1. MIDI Generator (src/core/midi_generator.py)
   - Handles MIDI file creation
   - Manages MIDI events and timing
   - Supports multiple instruments and channels
   - Handles drum patterns and program changes
   - Generates separate MIDI files for each instrument
   - Implements comprehensive error handling

2. Song Parser (src/core/song_parser.py)
   - Parses song files in text format
   - Handles song metadata (title, tempo, time signature, key)
   - Processes note events with timing and dynamics
   - Supports chord notation and multiple voices
   - Validates input format and data
   - Implements section-based parsing

3. Pattern Manager (src/patterns/pattern_manager.py)
   - Manages musical patterns for instruments and genres
   - Implements pattern caching for performance
   - Parses pattern files with note events and properties
   - Supports pattern format:
     * Pattern headers with genre and time signature
     * Note lines with beat timing, notes, dynamics, and duration
     * Multiple patterns per instrument file
   - Handles pattern file loading and error handling
   - Provides cleanup for resource management

4. Variation Manager (src/patterns/variation_manager.py)
   - Manages pattern variations for each instrument
   - Implements variation caching for performance
   - Handles variation file loading and error handling
   - Provides cleanup for resource management
   - Supports genre-specific variations

5. Base Instrument (src/instruments/base.py)
   - Defines common instrument interface
   - Handles MIDI channel assignment
   - Manages instrument-specific parameters
   - Supports program changes and control messages
   - Provides common note parsing and validation
   - Implements song characteristic verification

Instrument Implementations
-------------------------
1. Piano (src/instruments/piano.py)
   - MIDI Channel: 0
   - Playable Range: C2 to C7
   - Features:
     * Handles both single notes and chords
     * Supports various playing styles
     * Dynamic velocity control
     * Error handling with fallback patterns
     * Genre-specific pattern generation
     * Section-based pattern variation

2. Guitar (src/instruments/guitar.py)
   - MIDI Channel: 1
   - Playable Range: E2 to E6
   - Features:
     * Chord strumming with realistic timing
     * Style-specific patterns
     * Support for both single notes and chords
     * Dynamic velocity control
     * Genre-specific pattern generation
     * Section-based pattern variation

3. Bass (src/instruments/bass.py)
   - MIDI Channel: 2
   - Playable Range: C1 to C3
   - Features:
     * Automatic lowest note selection from chords
     * Walking bass patterns for jazz style
     * Support for both single notes and chord root notes
     * Dynamic velocity control
     * Genre-specific pattern generation
     * Section-based pattern variation

4. Drums (src/instruments/drums.py)
   - MIDI Channel: 9 (Standard MIDI percussion channel)
   - Playable Range: B0 to A5
   - Features:
     * Standard drum kit sounds
     * Style-specific patterns
     * Automatic pattern generation
     * Dynamic velocity control
     * Genre-specific pattern generation
     * Section-based pattern variation

Data Files
----------
1. Song Files (input/songs/*.txt)
   - Text files containing song data
   - Format:
     * Header: Title, Tempo, Time Signature, Key
     * Note lines: "time|duration|dynamic|note"
     * Support for chords: [note1, note2, note3]
     * Section markers with mood indicators
   - Example:
     ```
     Title: Example Song
     Tempo: 120
     Time Signature: 4/4
     Key: C major
     
     [Intro]
     0.0|quarter|mf|C4
     1.0|quarter|mf|E4
     2.0|quarter|mf|G4
     3.0|quarter|mf|[C4,E4,G4]
     
     [Verse]
     4.0|quarter|mf|C4
     5.0|quarter|mf|E4
     6.0|quarter|mf|G4
     7.0|quarter|mf|[C4,E4,G4]
     ```

2. Template Files (input/templates/*.txt)
   - Example song templates
   - Format documentation
   - Usage guidelines
   - Section structure examples

Dependencies
-----------
- midiutil: MIDI file generation
- typing: Type hints
- pathlib: File system operations
- json: Genre definition parsing
- logging: Comprehensive logging system

Development Guidelines
--------------------
1. Code Organization
   - Keep related functionality together
   - Use clear module boundaries
   - Follow Python naming conventions
   - Document all public interfaces
   - Implement comprehensive error handling

2. Testing
   - Write unit tests for core components
   - Test MIDI file generation
   - Verify pattern parsing
   - Validate instrument implementations
   - Test error handling scenarios
   - Validate section-based patterns

3. Documentation
   - Keep documentation up to date
   - Document all public methods
   - Include usage examples
   - Maintain project outline
   - Document error handling
   - Update section-based pattern documentation

4. Version Control
   - Use meaningful commit messages
   - Keep commits focused and atomic
   - Review changes before committing
   - Maintain clean git history
   - Document breaking changes

Future Considerations
--------------------
1. Features
   - Add more genre definitions
   - Expand pattern library
   - Support more instruments
   - Add MIDI file import
   - Implement real-time preview
   - Add pattern visualization

2. Improvements
   - Optimize MIDI generation
   - Enhance pattern variation
   - Add real-time preview
   - Improve error handling
   - Add pattern validation
   - Implement pattern optimization

3. Integration
   - Add DAW integration
   - Support VST plugins
   - Add MIDI device support
   - Enable network collaboration
   - Add pattern sharing
   - Implement cloud storage
